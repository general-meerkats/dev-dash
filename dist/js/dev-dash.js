"use strict";var HitApi=function(e){function t(){i.$inputForm=e("#input-form")}function n(){i.$inputForm.submit(r)}function a(e){return{type:e.type,date:e.created_at,actor:e.actor.display_login,avatar:e.actor.avatar_url,payload:e.payload}}function r(t,n){var a="https://api.github.com/repos",r=a+"/"+t+"/"+n+"/events";e.getJSON(r).then(o)}function o(e){var t=["PushEvent","CommitCommentEvent"],n=["IssuesEvent","IssueCommentEvent","ProjectEvent","ProjectCardEvent","ProjectColumnEvent"],r=["CreateEvent","PullRequestEvent","PullRequestReviewEvent","PullRequestReviewCommentEvent"],o=l(e,t),p=l(e,n),i=l(e,r);RenderTable.render(o,p,i),RenderChart.render(e.map(a))}function l(e,t){return e.filter(function(e){return t.indexOf(e.type)!==-1}).map(a)}function p(){t(),n()}var i={};return{init:p,getEvents:r}}(jQuery),Greet=function(e){function t(){m.$greeting=e(".greeting"),m.$overlay=e('<div id="overlay"></div>'),m.$modalPrompt=e(document.createElement("div")),m.$modalError=e(document.createElement("p")),m.$modalPrompt.attr("id","user-modal").addClass("user-modal").html(f),m.$modalError.addClass("user-modal-error").html("GitHub Username Not Found"),e("body").append(m.$modalPrompt)}function n(){e("#user-modal-form").submit(a)}function a(e){e.preventDefault(),s=e.currentTarget[0].value.trim(),c=e.currentTarget[1].value.trim(),r(c).then(function(t){t.login===c&&(LS.setData("dev-dash-user",{name:e.currentTarget[0].value,githubName:e.currentTarget[1].value}),p(),u())}).catch(function(e){m.$modalPrompt.append(m.$modalError)})}function r(t){return e.getJSON("https://api.github.com/users/"+t)}function o(){var e,t=new Date,n=t.getHours();return e=n<12?"morning":n>=12&&n<17?"afternoon":"evening","Good "+e+", "+s+"."}function l(){m.$overlay.show(),m.$modalPrompt.addClass("user-modal-show")}function p(){m.$overlay.hide(),m.$modalPrompt.removeClass("user-modal-show")}function i(){var e=LS.getData("dev-dash-user");e&&e.name?(s=e.name,c=e.githubName,u()):l()}function u(){m.$greeting.text(o()),RepoSelect.getRepos(c)}function d(){t(),m.$overlay.hide(),e("body").append(m.$overlay),n(),i()}var s,c,m={},f='<form id="user-modal-form" class="Grid Grid--gutters Grid--full" action="submit">\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">Your Name:</span>\n                      <input id="user-modal-name" class="InputAddOn-field" type="text" required>\n                    </div>\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">GitHub User Name:</span>\n                      <input id="user-modal-username"  class="InputAddOn-field" type="text" required>\n                    </div>\n                      <div class="Grid-cell InputAddOn">\n                      <button class="InputAddOn-item" id="user-modal-button">Go!</button>\n                    </div>\n                    </form>';return{init:d}}(jQuery),LS=function(){function e(e,t){r&&r.setItem(e,JSON.stringify(t))}function t(e){if(r)return JSON.parse(r.getItem(e))}function n(){if(r)return r.clear()}function a(e){if(r)return r.removeItem(e)}var r=function(){var e,t,n=(new Date).toString();try{return e=window.localStorage,e.setItem(n,n),t=e.getItem(n)===n,e.removeItem(n),t&&e}catch(e){console.log("Problemz!")}}();return{setData:e,getData:t,deleteData:a,clearData:n}}(),RenderTable=function(e){function t(){c.$tableContainer=e(".table-container")}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function a(e,t,n){c.$tableContainer.empty(),e.length>0&&i(e),t.length>0&&u(t),n.length>0&&d(n)}function r(){return{$listItem:e(document.createElement("li")),$img:e(document.createElement("img")),$paragraph:e(document.createElement("p")),$paraSpan:e(document.createElement("span")),$a:e(document.createElement("a"))}}function o(t,n){return e(document.createElement("a")).attr("target","_blank").attr("href",t).html('<span class="bolder">'+n+"</span>")}function l(t,n,a){return e(document.createElement("div")).addClass("table-col").append("<h3>"+t+" "+n+"</h3>").append(a)}function p(e){var t=[];return e.forEach(function(e){"PushEvent"===e.type?e.payload.commits.forEach(function(n){t.push({actor:e.actor,avatar:e.avatar,date:e.date,message:n.message,sha:n.sha,type:"commit",url:n.url})}):t.push(e)}),t}function i(t){var a=p(t),i="Commit-Related Events",u=e(document.createElement("ul"));a.forEach(function(e){var t,a,l=r();"commit"===e.type?(t=e.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/commits/,"commit"),a=e.sha.slice(0,6),l.$img.attr("src",e.avatar).appendTo(l.$listItem),l.$paraSpan.text('"'+e.message+'"'),l.$paragraph.append('<span class="bolder">'+e.actor+"</span> committed ")):(t=e.payload.comment.html_url,a=e.payload.comment.commit_id.slice(0,6),l.$img.attr("src",e.avatar).appendTo(l.$listItem),l.$paraSpan.text('"'+e.payload.comment.body+'"'),l.$paragraph.append('<span class="bolder">'+e.actor+"</span> commented on ")),l.$paragraph.append(o(t,a)).append(" on "+n(e.date)+": ").append(l.$paraSpan).appendTo(l.$listItem),l.$listItem.appendTo(u)}),u.addClass("col-list"),c.$tableContainer.append(l(a.length,i,u))}function u(t){var a="Todo-Related Events",p=e(document.createElement("ul"));t.forEach(function(e){var t,a,l=r();l.$img.attr("src",e.avatar).appendTo(l.$listItem),"IssuesEvent"===e.type?(t=e.payload.issue.html_url,a="Issue "+e.payload.issue.number,l.$paragraph.append('<span class="bolder">'+e.actor+"</span> "+e.payload.action+" ").append(o(t,a)).append(" on "+n(e.date)+': "'+e.payload.issue.title+'"')):"IssueCommentEvent"===e.type&&(t=e.payload.comment.html_url,a="Issue "+e.payload.issue.number,l.$paragraph.append('<span class="bolder">'+e.actor+"</span> commented on ").append(o(t,a)).append(" on "+n(e.date)+': "'+e.payload.comment.body+'"')),l.$listItem.append(l.$paragraph).appendTo(p)}),p.addClass("col-list"),c.$tableContainer.append(l(t.length,a,p))}function d(t){var a="Merge-Related Events",p=e(document.createElement("ul"));t.forEach(function(e){var t,a,l=r();l.$img.attr("src",e.avatar),"CreateEvent"===e.type?l.$paragraph.append(['<span class="bolder">'+e.actor+"</span> created",e.payload.ref_type,'<span class="bolder">'+e.payload.ref+"</span> on",n(e.date)].join(" ")):"PullRequestEvent"===e.type?(t=e.payload.pull_request.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/pulls/,"pull"),a="Pull Request "+e.payload.pull_request.number,l.$paragraph.append('<span class="bolder">'+e.actor+"</span>").append(" "+e.payload.action+" ").append(o(t,a)).append(" on "+n(e.date))):"PullRequestReviewEvent"===e.type?(t=e.payload.pull_request.html_url,a=e.payload.pull_request.title,l.$paragraph.append([e.actor,e.payload.action,"review of "].join(" ")).append(o(t,a)).append(" on"+n(e.date))):"PullRequestReviewCommentEvent"===e.type&&(t=e.payload.comment.html_url,a=e.payload.comment.body,l.$paragraph.append(['<span class="bolder">'+e.actor+"</span>",e.payload.action,"pull request comment "].join(" ")).append(o(t,a)).append(" on"+n(e.date))),l.$listItem.append(l.$img).append(l.$paragraph).appendTo(p)}),p.addClass("col-list"),c.$tableContainer.append(l(t.length,a,p))}function s(){t()}var c={};return{init:s,render:a}}(jQuery),RenderChart=function(e){function t(){m.$container=e(".chart-container"),m.$svgElem=e(document.createElementNS(f,"svg"))}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function a(e){for(var t=e.map(function(e){return n(e.date)}),a=new Date(t[0]),r=new Date(t[t.length-1]),o=[],l=a;l<=r;)o.push(n(l)),l=l.addDays(1);return o}function r(e){var t,n;return t=e.reduce(function(e,t){return Math.max(e,t[1])},e[0][1]),n=Math.floor(t/4),4*(n+1)}function o(e){var t,r,o=[],l=[];return e.forEach(function(e){"PushEvent"===e.type?e.payload.commits.forEach(function(t){o.push({actor:e.actor,avatar:e.avatar,date:e.date,payload:t,type:"Commit"})}):o.push(e)}),t=o.sort(function(e,t){return new Date(e.date)-new Date(t.date)}),r=a(t),l=r.map(function(e){return[e.slice(3,10),t.filter(function(t){return n(t.date)===e}).length]})}function l(e){return 1===e.length}function p(e,t,n){return e.map(function(e,a){return[a*t+v,h-e[1]*n-$]})}function i(t){var n=e(document.createElementNS(f,"g")),a=t.length-1,o=r(t),l=(g-v-y)/a,i=(h-$-y)/o,u=p(t,l,i);return u.forEach(function(a,r){var o=e(document.createElementNS(f,"circle")),l=e(document.createElementNS(f,"title")),p=a[0],i=a[1],u=4;o.attr("cx",p).attr("cy",i).attr("r",u),l.text(t[r][0]+" ("+t[r][1]+" events)"),o.append(l),n.addClass("chart-circle").append(o)}),n}function u(t){var n,a,o=e(document.createElementNS(f,"g")),l=t.length-1,i=r(t),u=(g-v-y)/l,d=(h-$-y)/i,s=p(t,u,d);for(n=0;n<s.length-1;n+=1)a=e(document.createElementNS(f,"line")),a.attr("x1",s[n][0]).attr("y1",s[n][1]).attr("x2",s[n+1][0]).attr("y2",s[n+1][1]),o.addClass("chart-line").append(a);return o}function d(t,n){var a,o,l,p,i,u,d,s,c,m,E=e(document.createElementNS(f,"g")),b=r(t);if("y"===n){for(E.addClass("labels y-labels"),l=b>12?b/4:b,c=(h-$-y)/l,m=0;m<l+1;m+=1)s=m*b/l,d=h-$-c*m,a=e(document.createElementNS(f,"line")),a.addClass("horiz-rule").attr("x1",v).attr("y1",d).attr("x2",g-y+5).attr("y2",d),o=e(document.createElementNS(f,"text")),o.attr("x",v-20).attr("y",d+4).html(s),E.append(a).append(o);return E}if("x"===n||!n||null===n){for(E.addClass("labels x-labels"),l=t.length-1,u=(g-v-y)/l,m=0;m<t.length;m+=1)o=e(document.createElementNS(f,"text")),i=t[m][0],p=m*u,o.attr("x",p+v).attr("y",h-5).text(i),t.length>20?0!==m&&m%10!==0&&m!==t.length-1||o.appendTo(E):o.appendTo(E);return E}}function s(e){var t;if(m.$svgElem.empty(),m.$svgElem.addClass("chart--content").attr("id","svg").attr("xmlns",f).attr("height","100%").attr("viewBox","0 0 "+g+" "+h).attr("xml:space","preserve"),e.length>0){if(t=o(e),l(t))return;m.$svgElem.append(d(t,"y")).append(d(t,"x")),m.$svgElem.append(u(t)),m.$svgElem.append(i(t)),m.$container.append(m.$svgElem)}}function c(){t()}var m={},f="http://www.w3.org/2000/svg",g=1e3,h=400,v=80,$=40,y=40;return Date.prototype.addDays=function(e){var t=new Date(this.valueOf());return t.setDate(t.getDate()+e),t},{init:c,render:s}}(jQuery),RepoSelect=function(e){function t(){f.$selectContainer=e(".repo-select"),f.$p=e(document.createElement("p")),f.$listContainer=e(document.createElement("div")),f.$ul=e(document.createElement("ul")),f.$newRepoForm=e(document.createElement("form")),f.$newRepoUser=e(document.createElement("input")),f.$newRepoRepo=e(document.createElement("input")),f.$newRepoBtn=e(document.createElement("button"))}function n(){f.$selectContainer.on("click",".repo-select-highlight",a),f.$ul.on("click","div.li-descriptions",r),f.$ul.on("click","span.li-remove",o),f.$newRepoForm.on("submit",l)}function a(e){e.stopPropagation(),f.$listContainer.toggleClass("hidden")}function r(e){e.stopPropagation();var t=e.currentTarget.children[0].innerHTML.split(" / ");m=t[1],u(g),HitApi.getEvents(t[0],t[1]),f.$listContainer.addClass("hidden")}function o(t){t.stopPropagation();var n=(t.target.previousElementSibling.dataset.repo,e(t.target).parent()),a=n.attr("id");g.splice(a,1),n.remove(),LS.setData("dev-dash-repos",g)}function l(t){t.preventDefault(),t.stopPropagation();var n="https://api.github.com/repos",a=t.currentTarget[0].value,r=t.currentTarget[1].value;e.getJSON(n+"/"+a+"/"+r).then(function(e){return g.unshift(e),f.$newRepoUser[0].value="",f.$newRepoRepo[0].value="",g}).then(i).then(u).catch(function(e){console.warn("Error fetching repo.")})}function p(e){if(e&&e.length){e.forEach(function(e){g.push(e)});var t=g[0].full_name.split("/");return m=t[1],HitApi.getEvents(t[0],t[1]),e}}function i(e){return LS.setData("dev-dash-repos",g),e}function u(t){t&&t.length?(f.$ul.html(""),t.forEach(function(t,n){var a=e(document.createElement("li"));a.attr("id",n).html('<div class="li-descriptions" data-repo="'+t.name+'">\n                             <p>'+t.owner.login+" / "+t.name+"</p>\n                             <p>"+t.description+'</p>\n                           </div>\n                           <span class="li-remove">&#10060</span>'),f.$ul.append(a)}),d()):(console.log("no repos, holmes"),d(),f.$listContainer.removeClass("hidden"))}function d(){f.$newRepoBtn.html("+"),f.$newRepoUser.attr("required","true").attr("placeholder","author"),f.$newRepoRepo.attr("required","true").attr("placeholder","repo"),f.$newRepoForm.addClass("new-repo-form").append(f.$newRepoUser).append(f.$newRepoRepo).append(f.$newRepoBtn),f.$listContainer.addClass("repo-list").append(f.$ul).append(f.$newRepoForm),f.$p.html('You are currently viewing the <span class="repo-select-highlight">'+m+"&#x25BC;</span> repository."),f.$selectContainer.append(f.$p).append(f.$listContainer)}function s(t){h?(p(LS.getData("dev-dash-repos")),u(g)):e.getJSON("https://api.github.com/users/"+t+"/repos?sort=updated").then(function(e){return e.slice(0,3)}).then(p).then(i).then(u)}function c(){t(),n(),f.$listContainer.addClass("hidden")}var m,f={},g=[],h=function(){return!!LS.getData("dev-dash-repos")}();return{init:c,getRepos:s}}(jQuery),Backgrounds=function(e){function t(){p.$body=e("body")}function n(){return(new Date).toDateString().slice(4,15)}function a(){var e=LS.getData("dev-dash-bg"),t=Math.floor(Math.random()*i.length),a={imgName:i[t],date:n()};return e?e:a}function r(){var e,t,n=i.indexOf(d.imgName);new Date(u)>new Date(d.date)?(e=7===n?0:n+1,t=i[e],LS.setData("dev-dash-bg",{imgName:t,date:u}),o(t)):(o(d.imgName),LS.setData("dev-dash-bg",{imgName:d.imgName,date:u}))}function o(e){p.$body.css("background-image","url(dist/assets/"+e+".jpg)")}function l(){t(),r()}var p={},i=["001","002","003","004","005","006","007","008"],u=n(),d=a();return{init:l}}(jQuery);$(document).ready(function(){Backgrounds.init(),RepoSelect.init(),Greet.init(),HitApi.init(),RenderTable.init(),RenderChart.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
